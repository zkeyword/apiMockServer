#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../src/app')
var debug = require('debug')('demo:server')
var http = require('http')
var sockjs = require('../src/sock')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.NODE_APIMOCKSERVER_PORT || '3000')
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback())

/**
 * Create Sockit server
 */
sockjs.install({ sockjs_url: 'http://cdn.jsdelivr.net/sockjs/1.1.4/sockjs.min.js' }, server)
// var sockjsServer = sockjs.createServer({ sockjs_url: 'http://cdn.jsdelivr.net/sockjs/1.1.4/sockjs.min.js' })
// sockjsServer.on('connection', function (conn) {
//     conn.on('data', function (message) {
//         console.log(message)
//         conn.write(12121212, message)
//     })
// })
// sockjsServer.installHandlers(server, { prefix: '/echo' })

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    /* eslint-disable no-unreachable */
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
    console.log(`server runing port:${addr.port}`)
    debug('Listening on ' + bind)
}
